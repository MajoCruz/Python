from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from datetime import datetime
import dash

from dash import dcc
from dash import html
from dash import dash_table
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd
import dash_bootstrap_components as dbc
from dash import Dash,dcc,html,Input,Output

df= pd.read_excel("/Users/majocruz/Desktop/Python For Finance/inflacion.xlsx")

#construir dashboard
app = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])
server=app.server

app.title="Dashboard"
cuentas=["Inflacion"]

#layout del app
app.layout = html.Div([
    html.Div([html.Div([
        
    #primer drop down para elegir año.
    html.Div(dcc.Dropdown(
    id="Inflacion_año",value=["2019","2020","2021","2022","2023"],clearable=False, multi=True,
    options=[{'label':x,'value':x} for x in sorted(df.Año.unique())]
    ),className="six columns", style={"width":"50%"},),
    
    #revisar
    html.Div(dcc.Dropdown(
    id="Inflacion_total",value="Inflacion",clearable=False,
    options=[{'label':x,'value':x} for x in cuentas]
    ), className="six columns"), 
    ], className="row"),],className="custom-dropdown"),
    
    #graficas
    html.Div([dcc.Graph(id="graph",figure={},config={"displayModeBar":True,"displaylogo":False,
                                                   #"modeBarButtonsToRemove":['pan2d','lasso2d',
                                                   #                         'select2d']
                                                    }),],style={'width':'1100px'}),
    html.Div([dcc.Graph(id="boxplot",figure={},)],style={"width":'1100px'}),
    
    #tabla
    html.Div(html.Div(id="table-container"),style={'marginBottom':'15px','marginTop':
                                                 "10px"}),])


#callback de la funcion
@app.callback(
    [Output(component_id="graph",component_property="figure"),
    Output(component_id="boxplot",component_property="figure"),
    Output("table-container",'children')],
    [Input(component_id="Inflacion_año",component_property="value"),
    Input(component_id="Inflacion_total",component_property="value")]
)

#definicion de la funcion

def display_value(selected_año,selected_mes):
    if len(selected_año)==0:
        df2=df[df["Año"].isin(["2019","2020","2021","2022","2023"])]
    else:
        df2=df[df["Año"].isin(selected_año)]
    
    #grafica1
    fig= px.line(df2,color="Año",x="Mes",markers=True,y=selected_mes,
                width=1000,height=500)
    
    fig.update_layout(title=f'{selected_mes} de {selected_año}',
                     xaxis_title="Inflacion Mensual",)
    fig.update_traces(line=dict(width=2))
    
    #grafica 2
    fig2=px.box(df2,color="Año",x="Año",y=selected_mes,
               width=1000,height=500)
    fig2.update_layout(title=f'{selected_mes} de {selected_año}',
                      )
    
    #modificar data frame para poder hacerlo tabla
    df_reshaped = df2.pivot(index='Año', columns='Mes', values=selected_mes)
    df_reshaped_3 = df_reshaped.reset_index()

    #tabla
    return (fig,fig2,
           dash_table.DataTable(columns=[{"name":i,"id":i} for i in df_reshaped_3],
                               data=df_reshaped_3.to_dict("records"),
                               export_format="csv",#para guardar como csv
                               fill_width=True,
                               style_header={'backgroundColor':'blue',
                                            'color':'white'},
                               ))
#setear server y correr
if__name__=="__main__":
    app.run_server(debug=False,host ="0.0.0.0", port=10000)
    

df5= pd.read_excel("/Users/majocruz/Desktop/Python For Finance/IMAE.xlsx")


#construir dashboard
app4 = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])
server=app4.server

cuentas=["Indice"]

#layout del app
app4.layout = html.Div([
    html.Div([html.Div([
        
    #primer drop down para elegir año.
    html.Div(dcc.Dropdown(
    id="Indice_año",value=["2018,""2019","2020","2021","2022","2023"],clearable=False, multi=True,
    options=[{'label':x,'value':x} for x in sorted(df5.Año.unique())]
    ),className="six columns", style={"width":"50%"},),
    
    #revisar
    html.Div(dcc.Dropdown(
    id="Indice",value="Indice",clearable=False,
    options=[{'label':x,'value':x} for x in cuentas]
    ), className="six columns"), 
    ], className="row"),],className="custom-dropdown"),
    
    #graficas
    html.Div([dcc.Graph(id="graph",figure={},config={"displayModeBar":True,"displaylogo":False,
                                                   #"modeBarButtonsToRemove":['pan2d','lasso2d',
                                                   #                         'select2d']
                                                    }),],style={'width':'1100px'}),
    html.Div([dcc.Graph(id="boxplot",figure={},)],style={"width":'1100px'}),
    
    #tabla
    html.Div(html.Div(id="table-container"),style={'marginBottom':'15px','marginTop':
                                                 "10px"}),])


#callback de la funcion
@app4.callback(
    [Output(component_id="graph",component_property="figure"),
    Output(component_id="boxplot",component_property="figure"),
    Output("table-container",'children')],
    [Input(component_id="Indice_año",component_property="value"),
    Input(component_id="Indice",component_property="value")]
)

#definicion de la funcion

def display_value(selected_año,selected_mes):
    if len(selected_año)==0:
        df3=df5[df5["Año"].isin(["2018","2019","2020","2021","2022","2023"])]
    else:
        df3=df5[df5["Año"].isin(selected_año)]
    
    #grafica1
    fig4= px.line(df3,color="Año",x="Mes",markers=True,y=selected_mes,
                width=1000,height=500)
    
    fig4.update_layout(title=f'{selected_mes} de {selected_año}',
                     xaxis_title="Indice Mensual",)
    fig4.update_traces(line=dict(width=2))
    
    #grafica 2
    fig5=px.box(df3,color="Año",x="Año",y=selected_mes,
               width=1000,height=500)
    fig5.update_layout(title=f'{selected_mes} de {selected_año}',
                      )
    
    #modificar data frame para poder hacerlo tabla
    df_reshaped = df3.pivot(index='Año', columns='Mes', values=selected_mes)
    df_reshaped_4 = df_reshaped.reset_index()

    #tabla
    return (fig4,fig5,
           dash_table.DataTable(columns=[{"name":i,"id":i} for i in df_reshaped_4],
                               data=df_reshaped_4.to_dict("records"),
                               export_format="csv",#para guardar como csv
                               fill_width=True,
                               style_header={'backgroundColor':'blue',
                                            'color':'white'},
                               ))
#setear server y correr
if__name__=="__main__":
    app4.run_server(debug=False,host ="0.0.0.0", port=10001)
    

df8 = pd.read_excel("/Users/majocruz/Desktop/Python For Finance/Ingreso por Exportaciones.xlsx")

#construir dashboard
app7 = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])
server=app7.server

cuentas=["Azucar","Banano","Cafe","Cardamomo"]

#layout del app
app7.layout = html.Div([
    html.Div([html.Div([
        
    #primer drop down para elegir año.
    html.Div(dcc.Dropdown(
    id="Ingreso_año",value=["2017","2018","2019","2020","2021","2022","2023"],clearable=False, multi=True,
    options=[{'label':x,'value':x} for x in sorted(df.Año.unique())]
    ),className="six columns", style={"width":"50%"},),
    
    #revisar
    html.Div(dcc.Dropdown(
    id="Ingreso_productos",value=["Azucar","Banano","Cafe","Cardamomo"],clearable=False,
    options=[{'label':x,'value':x} for x in cuentas]
    ), className="six columns"), 
    ], className="row"),],className="custom-dropdown"),
    
    #graficas
    html.Div([dcc.Graph(id="graph",figure={},config={"displayModeBar":True,"displaylogo":False,
                                                   #"modeBarButtonsToRemove":['pan2d','lasso2d',
                                                   #                         'select2d']
                                                    }),],style={'width':'1100px'}),
    html.Div([dcc.Graph(id="boxplot",figure={},)],style={"width":'1100px'}),
    
    #tabla
    html.Div(html.Div(id="table-container"),style={'marginBottom':'15px','marginTop':
                                                 "10px"}),])


#callback de la funcion
@app7.callback(
    [Output(component_id="graph",component_property="figure"),
    Output(component_id="boxplot",component_property="figure"),
    Output("table-container",'children')],
    [Input(component_id="Ingreso_año",component_property="value"),
    Input(component_id="Ingreso_productos",component_property="value")]
)

#definicion de la funcion

def display_value(selected_uno,selected_dos):
    if len(selected_uno)==0:
        df9=df8[df8["Año"].isin(["2017","2018","2019","2020","2021","2022","2023"])]
    else:
        df9=df8[df8["Año"].isin(selected_uno)]
    
    #grafica1
    fig6= px.line(df9,color="Año",x="Mes",markers=True,y=selected_dos,
                width=1000,height=500)
    
    fig6.update_layout(title=f'{selected_dos} de {selected_uno}',
                     xaxis_title="Indice Mensual",)
    fig6.update_traces(line=dict(width=2))
    
    #grafica 2
    fig7=px.box(df9,color="Año",x="Año",y=selected_dos,
               width=1000,height=500)
    fig7.update_layout(title=f'{selected_dos} de {selected_uno}',
                      )
    
    #modificar data frame para poder hacerlo tabla
    df_reshaped = df9.pivot(index='Año', columns='Mes', values=selected_dos)
    df_reshaped_5 = df_reshaped.reset_index()

    #tabla
    return (fig6,fig7,
           dash_table.DataTable(columns=[{"name":i,"id":i} for i in df_reshaped_5],
                               data=df_reshaped_5.to_dict("records"),
                               export_format="csv",#para guardar como csv
                               fill_width=True,
                               style_header={'backgroundColor':'blue',
                                            'color':'white'},
                               ))
#setear server y correr
if__name__=="__main__":
    app7.run_server(debug=False,host ="0.0.0.0", port=10002)
